using System;
using System.Net.Http;
using System.Diagnostics;
using System.Security.Cryptography;
using System.Text;
using System.Collections.Generic;
using Newtonsoft.Json.Linq;

namespace SeuProjeto
{
    public static class ManualPkceFlow
    {
        // Ajuste conforme seu ambiente no Azure AD:
        private static string TenantId    = "xxxxx-xxxxx-xxxxx-xxxxx";
        private static string ClientId    = "yyyyy-yyyyy-yyyyy-yyyyy";
        private static string RedirectUri = "https://localhost/manualcallback";
        private static string Scope       = "openid profile offline_access https://graph.microsoft.com/.default";

        /// <summary>
        /// Método que executa o fluxo Manual PKCE do início ao fim,
        /// abrindo o navegador, pedindo o code e trocando por token.
        /// Chame este método de qualquer lugar (por exemplo, no clique de um botão).
        /// </summary>
        public static void RunFlow()
        {
            Console.WriteLine("=== Iniciando Fluxo Manual PKCE ===");

            // 1) Gerar PKCE: code_verifier e code_challenge
            var (codeVerifier, codeChallenge) = GeneratePkcePair();

            // 2) Montar a URL de autorização
            string authorizeEndpoint = $"https://login.microsoftonline.com/{TenantId}/oauth2/v2.0/authorize";
            string url = authorizeEndpoint
                + "?client_id=" + Uri.EscapeDataString(ClientId)
                + "&response_type=code"
                + "&redirect_uri=" + Uri.EscapeDataString(RedirectUri)
                + "&scope=" + Uri.EscapeDataString(Scope)
                + "&code_challenge=" + Uri.EscapeDataString(codeChallenge)
                + "&code_challenge_method=S256";

            // 3) Abrir o Chrome
            try
            {
                Process.Start("chrome.exe", url);
                Console.WriteLine("Abra o Chrome, faça login.");
            }
            catch (Exception ex)
            {
                Console.WriteLine("Falha ao abrir Chrome: " + ex.Message);
                return;
            }

            Console.WriteLine("Ao final, o Azure AD redirecionará para {0}?code=XYZ...", RedirectUri);
            Console.WriteLine("Mas não existe servidor local, então dará erro de 'página não encontrada'.");
            Console.WriteLine("Copie APENAS o valor do 'code' da URL e cole aqui.");
            Console.WriteLine();

            // 4) Pedir o "code" ao usuário (no console). Em outra UI, pode usar InputBox, TextBox etc.
            Console.Write("Cole o code aqui: ");
            string code = Console.ReadLine();

            if (string.IsNullOrEmpty(code))
            {
                Console.WriteLine("Nenhum code informado. Fluxo cancelado.");
                return;
            }

            // 5) Trocar code por token
            try
            {
                string accessToken = ExchangeCodeForToken(code, codeVerifier);
                Console.WriteLine("Sucesso! Access Token (parcial):");
                Console.WriteLine(accessToken.Substring(0, 50) + "...");
            }
            catch (Exception ex2)
            {
                Console.WriteLine("Erro ao trocar code por token: " + ex2.Message);
            }

            Console.WriteLine("Fluxo Manual PKCE finalizado.");
        }

        /// <summary>
        /// Faz a troca do "code" pelo Access Token, usando o code_verifier gerado inicialmente.
        /// </summary>
        private static string ExchangeCodeForToken(string code, string codeVerifier)
        {
            string tokenEndpoint = $"https://login.microsoftonline.com/{TenantId}/oauth2/v2.0/token";

            var fields = new List<KeyValuePair<string,string>>
            {
                new KeyValuePair<string,string>("grant_type", "authorization_code"),
                new KeyValuePair<string,string>("code", code),
                new KeyValuePair<string,string>("redirect_uri", RedirectUri),
                new KeyValuePair<string,string>("client_id", ClientId),
                new KeyValuePair<string,string>("code_verifier", codeVerifier),
                new KeyValuePair<string,string>("scope", Scope)
            };

            using (var client = new HttpClient())
            {
                // .NET 4.5.2 pode precisar de TLS 1.2:
                System.Net.ServicePointManager.SecurityProtocol = System.Net.SecurityProtocolType.Tls12;

                var content = new FormUrlEncodedContent(fields);
                var response = client.PostAsync(tokenEndpoint, content).Result;
                if (!response.IsSuccessStatusCode)
                {
                    string error = response.Content.ReadAsStringAsync().Result;
                    throw new Exception($"Erro {response.StatusCode}: {error}");
                }

                string json = response.Content.ReadAsStringAsync().Result;
                JObject obj = JObject.Parse(json);
                string accessToken = (string)obj["access_token"];
                if (string.IsNullOrEmpty(accessToken))
                {
                    throw new Exception("access_token ausente na resposta do Azure AD.");
                }

                return accessToken;
            }
        }

        /// <summary>
        /// Gera o par (code_verifier, code_challenge) para PKCE.
        /// </summary>
        private static (string codeVerifier, string codeChallenge) GeneratePkcePair()
        {
            string verifier = GenerateRandomString(50);
            using (var sha = SHA256.Create())
            {
                byte[] hash = sha.ComputeHash(Encoding.UTF8.GetBytes(verifier));
                string challenge = Base64UrlEncode(hash);
                return (verifier, challenge);
            }
        }

        private static string GenerateRandomString(int length)
        {
            const string chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-._~";
            var rand = new Random();
            char[] buffer = new char[length];
            for (int i = 0; i < length; i++)
            {
                buffer[i] = chars[rand.Next(chars.Length)];
            }
            return new string(buffer);
        }

        private static string Base64UrlEncode(byte[] arg)
        {
            string s = Convert.ToBase64String(arg)
                .TrimEnd('=')
                .Replace('+','-')
                .Replace('/','_');
            return s;
        }
    }
}
