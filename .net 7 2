using System;
using System.IO;
using System.Net.Http;
using System.Net;
using System.Security.Cryptography.X509Certificates;

class Program
{
    static void Main(string[] args)
    {
        try
        {
            // Caminho do arquivo PFX (inclui o certificado e a chave privada)
            string pfxFilePath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "client_cert.pfx");
            string pfxPassword = "password"; // Senha do arquivo PFX

            // Caminho do certificado da CA
            string caCertPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "CA-cert.pem");

            // URL do endpoint protegido
            string vaultUrl = "https://vault-tradops.dev.ops.aws.cloud.ihf/v1/auth/cert/login";

            // Carregar o certificado do cliente (PFX)
            var clientCertificate = new X509Certificate2(pfxFilePath, pfxPassword);

            // Carregar o certificado da Autoridade Certificadora (CA)
            var caCertificate = new X509Certificate2(File.ReadAllBytes(caCertPath));

            // Configurar a validação personalizada de certificados no HttpClientHandler
            var handler = new HttpClientHandler
            {
                ClientCertificates = { clientCertificate },
                ServerCertificateCustomValidationCallback = (sender, cert, chain, sslPolicyErrors) =>
                {
                    if (sslPolicyErrors != SslPolicyErrors.None)
                    {
                        Console.WriteLine($"Erro de política SSL: {sslPolicyErrors}");
                        return false;
                    }

                    // Validar a cadeia de certificados manualmente
                    if (chain != null && chain.Build((X509Certificate2)cert))
                    {
                        foreach (var chainElement in chain.ChainElements)
                        {
                            if (chainElement.Certificate.Thumbprint == caCertificate.Thumbprint)
                            {
                                return true; // Certificado da CA encontrado
                            }
                        }
                    }

                    return false; // Certificado da CA não encontrado ou inválido
                }
            };

            // Forçar uso de TLS 1.2
            ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;

            // Fazer a requisição POST
            using (var client = new HttpClient(handler))
            {
                var response = client.PostAsync(vaultUrl, null).Result;
                if (!response.IsSuccessStatusCode)
                {
                    throw new Exception($"Erro na requisição: {response.StatusCode} - {response.ReasonPhrase}");
                }

                // Ler e exibir a resposta
                var content = response.Content.ReadAsStringAsync().Result;
                Console.WriteLine("Resposta da API:");
                Console.WriteLine(content);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro: {ex.Message}");
        }
    }
}
