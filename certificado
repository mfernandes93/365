Passo 1: Estrutura do Projeto
Configuração para Desenvolvimento e Produção:

Vamos usar o app.config ou appsettings.json para armazenar as configurações de ambiente (produção ou desenvolvimento) e as credenciais correspondentes.
Autenticação com Certificado:

Usaremos o fluxo de Client Credentials com um certificado (em vez de um client_secret) para autenticar nossa aplicação no Azure AD e obter um access token.
Windows Forms:

O código incluirá um botão que chamará o processo de autenticação quando clicado e exibirá o token ou erro em um MessageBox.
Estrutura do Projeto
App.config ou appsettings.json: Para armazenar as credenciais de desenvolvimento e produção.
AzureAuthentication.cs: O código de autenticação que obtém o token de acesso.
Form1.cs: O formulário onde o botão chama o método de autenticação e exibe o resultado.
Passo 2: Configuração do App.config
Vamos começar configurando o App.config para armazenar as credenciais de desenvolvimento e produção. A ideia é ter um arquivo onde você pode facilmente alternar entre as credenciais de desenvolvimento e produção.

xml:

<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <appSettings>
    <!-- Configurações para Desenvolvimento -->
    <add key="Environment" value="Development"/>
    
    <!-- Credenciais de Desenvolvimento -->
    <add key="TenantIdDev" value="seu-tenant-id-dev"/>
    <add key="ClientIdDev" value="seu-client-id-dev"/>
    <add key="CertificatePathDev" value="C:\caminho\para\certificado\dev\certificado.pfx"/>
    <add key="CertificatePasswordDev" value="senha-do-certificado-dev"/>
    
    <!-- Credenciais de Produção -->
    <add key="TenantIdProd" value="seu-tenant-id-prod"/>
    <add key="ClientIdProd" value="seu-client-id-prod"/>
    <add key="CertificatePathProd" value="C:\caminho\para\certificado\prod\certificado.pfx"/>
    <add key="CertificatePasswordProd" value="senha-do-certificado-prod"/>
  </appSettings>
</configuration>
Passo 3: Classe AzureAuthentication.cs - Autenticação com Certificado
Agora, vamos criar uma classe que vai realizar a autenticação com o Azure AD usando o Client Credentials Flow e um certificado.

AzureAuthentication.cs

using Microsoft.IdentityModel.Clients.ActiveDirectory;
using System;
using System.Security.Cryptography.X509Certificates;
using System.Configuration;
using System.Threading.Tasks;

public static class AzureAuthentication
{
    // Método para obter o token com base no ambiente (Desenvolvimento ou Produção)
    public static async Task<string> ObterTokenComCertificado()
    {
        try
        {
            // Definir o ambiente (Desenvolvimento ou Produção) com base na configuração
            string environment = ConfigurationManager.AppSettings["Environment"];
            string tenantId, clientId, certificatePath, certificatePassword;

            if (environment == "Development")
            {
                tenantId = ConfigurationManager.AppSettings["TenantIdDev"];
                clientId = ConfigurationManager.AppSettings["ClientIdDev"];
                certificatePath = ConfigurationManager.AppSettings["CertificatePathDev"];
                certificatePassword = ConfigurationManager.AppSettings["CertificatePasswordDev"];
            }
            else // Produção
            {
                tenantId = ConfigurationManager.AppSettings["TenantIdProd"];
                clientId = ConfigurationManager.AppSettings["ClientIdProd"];
                certificatePath = ConfigurationManager.AppSettings["CertificatePathProd"];
                certificatePassword = ConfigurationManager.AppSettings["CertificatePasswordProd"];
            }

            string authority = $"https://login.microsoftonline.com/{tenantId}"; // URL de autoridade do Azure AD

            // Carregar o certificado
            var certificate = new X509Certificate2(certificatePath, certificatePassword);

            // Escopo da API (Microsoft Graph ou qualquer API configurada)
            string[] scopes = new string[] { "https://graph.microsoft.com/.default" };

            // Criar o objeto de autenticação usando ADAL.NET
            var authContext = new AuthenticationContext(authority);

            // Configurar a autenticação com o certificado
            var clientCredential = new ClientCredential(clientId, certificate);
            
            // Solicitar o token de acesso usando Client Credentials Flow
            var result = await authContext.AcquireTokenAsync(scopes[0], clientCredential);

            // Retornar o token de acesso
            return result.AccessToken;
        }
        catch (AdalException ex)
        {
            return $"Erro ao obter o token: {ex.Message}";
        }
    }
}
Passo 4: Código do Formulário (Windows Forms)
Agora, vamos configurar o formulário para chamar o método ObterTokenComCertificado quando o botão for clicado e exibir o resultado em um MessageBox.



Código no Form1.cs

using System;
using System.Threading.Tasks;
using System.Windows.Forms;

public partial class Form1 : Form
{
    public Form1()
    {
        InitializeComponent();
    }

    // Evento do botão para testar o fluxo de autenticação
    private async void btnTestarAutenticacao_Click(object sender, EventArgs e)
    {
        // Chama o método de autenticação e aguarda o resultado (token ou erro)
        string resultado = await AzureAuthentication.ObterTokenComCertificado();

        // Exibe o resultado na MessageBox
        MessageBox.Show(resultado, "Resultado da Autenticação", MessageBoxButtons.OK, MessageBoxIcon.Information);
    }
}


Passo 5: Executando o Código


Quando você clicar no botão (btnTestarAutenticacao), o método ObterTokenComCertificado será chamado.
O resultado, seja o access token ou uma mensagem de erro, será exibido em uma MessageBox.
6. Passo Final: Como Funciona a Alternância Entre Desenvolvimento e Produção
O app.config controla qual ambiente você está usando. Quando o valor da chave "Environment" for "Development", o aplicativo usará as credenciais de desenvolvimento (como o tenantId, clientId, caminho do certificado de desenvolvimento, etc.).
Se o valor de "Environment" for "Production", as credenciais de produção serão usadas.
Isso facilita alternar entre ambientes de desenvolvimento e produção sem precisar alterar o código.
  

Resumo dos Passos


Configuração do App.config para armazenar credenciais de produção e desenvolvimento.
Classe AzureAuthentication: Método que usa o certificado para autenticação usando Client Credentials Flow.
Código no Formulário: Método de teste para exibir o resultado (token ou erro) em um MessageBox.
Teste Final
Ambiente de Desenvolvimento: Ao testar, o token de desenvolvimento será obtido.
Ambiente de Produção: Alterando o Environment no App.config para "Production", o token de produção será obtido.
Exemplo de Saída:
Se a autenticação for bem-sucedida, o access token será mostrado em uma MessageBox.
Se houver erro (como certificado inválido, credenciais incorretas, ou erro de rede), a mensagem de erro será exibida.
