using Microsoft.IdentityModel.Clients.ActiveDirectory;
using System;
using System.IO;
using System.Net.Http;
using System.Security.Cryptography;
using System.Security.Cryptography.X509Certificates;
using System.Text;
using System.Threading.Tasks;

public static class AzureAuthentication
{
    public static async Task<string> ObterTokenComCertificado()
    {
        try
        {
            // IDs e autoridade do Azure AD
            string tenantId = "seu-tenant-id";
            string clientId = "seu-client-id"; // ID da aplicação registrada no Azure AD
            string authority = $"https://login.microsoftonline.com/{tenantId}"; // URL de autoridade do Azure AD

            // Caminhos dos arquivos PEM
            string appDirectory = AppDomain.CurrentDomain.BaseDirectory; // Diretório do aplicativo
            string certFolderPath = Path.Combine(appDirectory, "Certificados");

            string caCertPath = Path.Combine(certFolderPath, "CA-cert.pem"); // Caminho do CA-cert
            string certPath = Path.Combine(certFolderPath, "certificado.pem"); // Caminho do certificado do cliente
            string keyPath = Path.Combine(certFolderPath, "chave.pem"); // Caminho da chave privada do cliente

            // Verifique se os arquivos existem
            if (!File.Exists(caCertPath) || !File.Exists(certPath) || !File.Exists(keyPath))
            {
                throw new FileNotFoundException("Certificado, chave privada ou CA-cert não encontrados.");
            }

            // Carregar e combinar o certificado e a chave privada em memória
            var clientCertificate = CreateCertificateFromPem(certPath, keyPath);

            // Criar o handler para o HttpClient com o certificado do cliente
            var handler = new HttpClientHandler();
            handler.ClientCertificates.Add(clientCertificate);

            // Adicionar a validação do servidor (usando o CA-cert)
            handler.ServerCertificateCustomValidationCallback = (sender, cert, chain, sslPolicyErrors) =>
            {
                // Validar o certificado do servidor usando o CA-cert
                if (sslPolicyErrors == System.Net.Security.SslPolicyErrors.None)
                {
                    return true;
                }

                // Carregar o CA-cert para validação
                var caCert = new X509Certificate2(caCertPath);
                return chain.ChainElements[^1].Certificate.Equals(caCert);
            };

            // Criar o HttpClient com o handler configurado
            using (var httpClient = new HttpClient(handler))
            {
                // Criar o objeto de autenticação usando ADAL
                var authContext = new AuthenticationContext(authority);
                var clientCredential = new ClientCredential(clientId, clientCertificate);

                // Solicitar o token de acesso
                var result = await authContext.AcquireTokenAsync("https://graph.microsoft.com/.default", clientCredential);

                // Retornar o token
                return result.AccessToken;
            }
        }
        catch (AdalException ex)
        {
            return $"Erro ao obter o token: {ex.Message}";
        }
    }

    // Método para criar um certificado X509 a partir de arquivos PEM
    private static X509Certificate2 CreateCertificateFromPem(string certPath, string keyPath)
    {
        // Ler os arquivos PEM
        var certPem = File.ReadAllText(certPath);
        var keyPem = File.ReadAllText(keyPath);

        // Extrair o certificado do arquivo PEM
        var certBytes = Convert.FromBase64String(certPem
            .Replace("-----BEGIN CERTIFICATE-----", string.Empty)
            .Replace("-----END CERTIFICATE-----", string.Empty)
            .Replace("\n", "")
            .Replace("\r", ""));

        // Extrair a chave privada do arquivo PEM
        var keyBytes = Convert.FromBase64String(keyPem
            .Replace("-----BEGIN PRIVATE KEY-----", string.Empty)
            .Replace("-----END PRIVATE KEY-----", string.Empty)
            .Replace("\n", "")
            .Replace("\r", ""));

        // Criar a chave RSA a partir da chave privada
        var rsa = RSA.Create();
        rsa.ImportPkcs8PrivateKey(keyBytes, out _);

        // Criar o certificado com a chave privada
        var certificate = new X509Certificate2(certBytes);
        return certificate.CopyWithPrivateKey(rsa);
    }
}
